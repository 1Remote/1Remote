<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:attachProperty="clr-namespace:PRM.Resources.Theme.AttachProperty"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="BaseStyle.xaml"></ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <Thickness x:Key="DefaultInputPadding">5,4</Thickness>
    <system:Double x:Key="DefaultOpacityAccent">1</system:Double>
    <system:Double x:Key="DefaultOpacityPressed">0.8</system:Double>

    <Style x:Key="ButtonBaseStyle" BasedOn="{StaticResource ControlBase}" TargetType="Button">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource BackgroundTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        <Setter Property="attachProperty:VisionElement.ForegroundAccent" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="attachProperty:VisionElement.BackgroundAccent" Value="{DynamicResource PrimaryMidBrush}"/>
        <Setter Property="attachProperty:VisionElement.ForegroundOnMouseDown" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="attachProperty:VisionElement.BackgroundOnMouseDown" Value="{DynamicResource PrimaryMidBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DefaultBorderBrush}"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="attachProperty:VisionElement.BorderCornerRadius" Value="{DynamicResource DefaultCornerRadius}"/>
        <Setter Property="attachProperty:VisionElement.Opacity" Value="1"/>
        <Setter Property="attachProperty:VisionElement.OpacityAccent" Value="1"/>
        <Setter Property="attachProperty:VisionElement.OpacityOnMouseDown" Value="0.8"/>
        <Setter Property="attachProperty:VisionElement.ContentGeometry" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Name="Grid" Opacity="{Binding Path=(attachProperty:VisionElement.Opacity),RelativeSource={RelativeSource TemplatedParent}}" >
                        <Border Name="BorderForBackground" 
                                SnapsToDevicePixels="True"
                                Background="{TemplateBinding Background}"
                                BorderThickness="0"
                                CornerRadius="{Binding Path=(attachProperty:VisionElement.BorderCornerRadius),RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border Name="Border" 
                                SnapsToDevicePixels="True"
                                Background="Transparent"
                                Opacity="0.5"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="{Binding Path=(attachProperty:VisionElement.BorderCornerRadius),RelativeSource={RelativeSource TemplatedParent}}" />

                        <Border ClipToBounds="True"
                                SnapsToDevicePixels="True"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="Transparent"
                                CornerRadius="{Binding Path=(attachProperty:VisionElement.BorderCornerRadius),RelativeSource={RelativeSource TemplatedParent}}" >
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Path Margin="{TemplateBinding Padding}" 
                                      Name="ContentGeometry"  
                                      Fill="{TemplateBinding Foreground}" 
                                      SnapsToDevicePixels="True" Stretch="Uniform" 
                                      Data="{TemplateBinding attachProperty:VisionElement.ContentGeometry}"/>
                                <ContentPresenter Margin="{TemplateBinding Padding}" 
                                                  x:Name="ContentPresenter" 
                                                  RecognizesAccessKey="True" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ContentPresenter" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"></Condition>
                                <Condition Property="IsPressed" Value="False"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ContentGeometry" Value="{Binding Path=(attachProperty:VisionElement.ForegroundAccent),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Foreground" Value="{Binding Path=(attachProperty:VisionElement.ForegroundAccent),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="TextElement.Foreground" TargetName="ContentPresenter" Value="{Binding Path=(attachProperty:VisionElement.ForegroundAccent),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="BorderBrush" TargetName="Border" Value="{Binding Path=(attachProperty:VisionElement.ForegroundAccent),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Opacity" TargetName="Border" Value="1" />
                            <Setter Property="Opacity" TargetName="Grid" Value="{Binding Path=(attachProperty:VisionElement.OpacityAccent),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Background" TargetName="BorderForBackground" Value="{Binding Path=(attachProperty:VisionElement.BackgroundAccent),RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="ContentGeometry" Value="{Binding Path=(attachProperty:VisionElement.ForegroundOnMouseDown),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Foreground" Value="{Binding Path=(attachProperty:VisionElement.ForegroundOnMouseDown),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="TextElement.Foreground" TargetName="ContentPresenter" Value="{Binding Path=(attachProperty:VisionElement.ForegroundOnMouseDown),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="BorderBrush" TargetName="Border" Value="{Binding Path=(attachProperty:VisionElement.ForegroundOnMouseDown),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Opacity" TargetName="Border" Value="1" />
                            <Setter Property="Opacity" TargetName="Grid" Value="{Binding Path=(attachProperty:VisionElement.OpacityOnMouseDown),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Background" TargetName="BorderForBackground" Value="{Binding Path=(attachProperty:VisionElement.BackgroundOnMouseDown),RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="attachProperty:VisionElement.ContentGeometry" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ContentGeometry" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4" />
                            <Setter Property="Cursor" Value="Arrow" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"></Condition>
                    <Condition Property="IsPressed" Value="False"></Condition>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding Path=(attachProperty:VisionElement.ForegroundAccent),RelativeSource={x:Static RelativeSource.Self}}" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=(attachProperty:VisionElement.ForegroundOnMouseDown),RelativeSource={x:Static RelativeSource.Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="ButtonPrimaryStyle" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryMidBrush}"/>
        <Setter Property="attachProperty:VisionElement.ForegroundAccent" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="attachProperty:VisionElement.BackgroundAccent" Value="{DynamicResource PrimaryMidBrush}"/>
        <Setter Property="attachProperty:VisionElement.ForegroundOnMouseDown" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="attachProperty:VisionElement.BackgroundOnMouseDown" Value="{DynamicResource PrimaryMidBrush}"/>
    </Style>

    <Style x:Key="ButtonAccentStyle" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource AccentTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource AccentMidBrush}"/>
        <Setter Property="attachProperty:VisionElement.ForegroundAccent" Value="{DynamicResource AccentTextBrush}"/>
        <Setter Property="attachProperty:VisionElement.BackgroundAccent" Value="{DynamicResource AccentMidBrush}"/>
        <Setter Property="attachProperty:VisionElement.ForegroundOnMouseDown" Value="{DynamicResource AccentTextBrush}"/>
        <Setter Property="attachProperty:VisionElement.BackgroundOnMouseDown" Value="{DynamicResource AccentMidBrush}"/>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource ButtonAccentStyle}" />













    <Style x:Key="ButtonBarPrimaryStyle" BasedOn="{StaticResource ButtonPrimaryStyle}" TargetType="Button">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="attachProperty:VisionElement.BorderCornerRadius" Value="0"/>
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryMidBrush}"/>
        <Setter Property="attachProperty:VisionElement.ForegroundAccent" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="attachProperty:VisionElement.BackgroundAccent" Value="{DynamicResource PrimaryLightBrush}"/>
        <Setter Property="attachProperty:VisionElement.ForegroundOnMouseDown" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="attachProperty:VisionElement.BackgroundOnMouseDown" Value="{DynamicResource PrimaryMidBrush}"/>
    </Style>

    <Style x:Key="ButtonBarAccentStyle" BasedOn="{StaticResource ButtonBarPrimaryStyle}" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource AccentTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource AccentMidBrush}"/>
        <Setter Property="attachProperty:VisionElement.ForegroundAccent" Value="{DynamicResource AccentTextBrush}"/>
        <Setter Property="attachProperty:VisionElement.BackgroundAccent" Value="{DynamicResource AccentLightBrush}"/>
        <Setter Property="attachProperty:VisionElement.ForegroundOnMouseDown" Value="{DynamicResource AccentTextBrush}"/>
        <Setter Property="attachProperty:VisionElement.BackgroundOnMouseDown" Value="{DynamicResource AccentMidBrush}"/>
    </Style>

</ResourceDictionary>